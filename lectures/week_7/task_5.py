# 3. Два прохода

# Задача
# На парковке в торговом центре N мест (занумерованных от 1 до N). 
# За день в ТЦ приезжало М автомобилей, при этом некоторые из них 
# длинные и занимали несколько подряд идущих парковочных мест. 
# Для каждого автомобиля известно время приезда и отъезда, а также 
# два числа — с какого по какое парковочные места он занимал. 
# Если в какай-то момент времени один автомобиль уехал 
# с парковочного места, то место считается освободившимся 
# и в тот же момент времени на его места может встать другой

# Необходимо определить, был ли момент, в который были заняты все 
# парковочные места и определить минимальное количество автомобилей, 
# которое заняло все места. Если такого момента не было — вернуть М + 1

# Решение
# Добавим еще один счетчик на количество автомобилей и будем 
# обновлять минимальное количество автомобилей когда заняты 
# все места

def min_cars_on_full_parking(cars, n):
    events = []
    for car in cars:
        time_in, time_out, place_from, place_to = car
        events.append((time_in, 1, place_to - place_from + 1))
        events.append((time_out, -1, place_to - place_from + 1))
    events.sort()
    occupied = 0
    now_cars = 0
    min_cars = len(cars) + 1
    for i in range(len(events)):
        if events[i][1] == -1:
            occupied -= events[i][2]
            now_cars -= 1
        elif events[i][1] == 1:
            occupied += events[i][2]
            now_cars += 1
        if occupied == n:
            min_cars = min(min_cars, now_cars)
    return min_cars

cars = (
        [13.00, 20.00, 1, 1],
        [12.00, 17.00, 2, 3],
        [12.00, 15.00, 4, 7],
        [16.00, 17.00, 4, 7],
        [15.00, 19.00, 8, 9],
        [14.00, 16.00, 10, 10],
        [16.00, 18.00, 10, 10],
    )
n = 10
print(min_cars_on_full_parking(cars, n))